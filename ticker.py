# -*- coding: utf-8 -*-
"""ticker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NDjBGyV_eUXkDhPvZJEldCZ6Kx_shMLj

# üí∏ Financial Health Monitor & Forecasting Engine

This project analyzes the financial health of major public companies using stock market data over 5 years. It calculates key financial KPIs, visualizes trends, and forecasts future stock prices using machine learning.

## üß∞ Tools Used:
- Python, Pandas, NumPy
- yFinance API
- Seaborn, Matplotlib
- Prophet (for forecasting)
"""

import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
from prophet import Prophet

sns.set(style="whitegrid")

"""## üìà Step 1: Data Collection

We'll use `yfinance` to download 5 years of historical stock price data for a few key companies.

"""

import yfinance as yf
import pandas as pd

# Helper function to fetch data safely
def fetch_stock_data(ticker):
    print(f"Fetching data for {ticker}")
    stock = yf.Ticker(ticker)
    hist = stock.history(period="5y")

    if hist.empty:
        print(f"‚ùå No data for {ticker}")
        return None

    hist = hist.reset_index()
    hist['Ticker'] = ticker
    return hist[['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Ticker']]

# Fetch each stock separately
aapl_df = fetch_stock_data('AAPL')
msft_df = fetch_stock_data('MSFT')
googl_df = fetch_stock_data('GOOGL')
tsla_df = fetch_stock_data('TSLA')

# Combine only if not None
dfs = [df for df in [aapl_df, msft_df, googl_df, tsla_df] if df is not None]
combined_df = pd.concat(dfs, ignore_index=True)

# Save and preview
combined_df.to_csv("fixed_stock_data.csv", index=False)
print("‚úÖ Data saved to fixed_stock_data.csv")
print(combined_df.head())

"""## üìä Step 2: Feature Engineering and KPI Creation

Goal: Generate Financial KPIs: returns, volatility, moving averages

These indicators show trends and investment performance
"""

combined_df['Date'] = pd.to_datetime(combined_df['Date'])

# Sort and group
combined_df = combined_df.sort_values(['Ticker', 'Date'])
combined_df['Daily Return'] = combined_df.groupby('Ticker')['Close'].pct_change()

# Moving averages
combined_df['MA_20'] = combined_df.groupby('Ticker')['Close'].transform(lambda x: x.rolling(window=20).mean())
combined_df['MA_50'] = combined_df.groupby('Ticker')['Close'].transform(lambda x: x.rolling(window=50).mean())

# Volatility (rolling standard deviation)
combined_df['Volatility_20'] = combined_df.groupby('Ticker')['Daily Return'].transform(lambda x: x.rolling(window=20).std())

# Yearly return (CAGR approximation)
combined_df['Year'] = combined_df['Date'].dt.year
cagr_df = combined_df.groupby(['Ticker', 'Year'])['Close'].agg(['first', 'last']).reset_index()
cagr_df['Annual Return (%)'] = ((cagr_df['last'] / cagr_df['first']) - 1) * 100

"""## üìà Step 3: Visual Analysis
Goal: Generate interactive and static charts using matplotlib, seaborn, and plotly.*italicised text*
"""

import matplotlib.pyplot as plt

# Plot closing prices for one stock
apple = combined_df[combined_df['Ticker'] == 'AAPL']
plt.figure(figsize=(10, 5))
plt.plot(apple['Date'].values, apple['Close'].values, label='AAPL Close Price')
plt.plot(apple['Date'].values, apple['MA_20'].values, label='20-Day MA')
plt.plot(apple['Date'].values, apple['MA_50'].values, label='50-Day MA')
plt.title("AAPL Closing Price with Moving Averages")
plt.legend()
plt.grid(True)
plt.show()

"""how stock prices have changed over time.

"""

plt.figure(figsize=(12, 6))
tickers = combined_df['Ticker'].unique()

for ticker in tickers:
    subset = combined_df[combined_df['Ticker'] == ticker]
    plt.plot(subset['Date'].values, subset['Close'].values, label=ticker)
plt.title("Stock Price Over Time")
plt.xlabel("Date")
plt.ylabel("Close Price")
plt.legend()
plt.tight_layout()
plt.show()

"""## üîÆ Step 4: Forecast Future Stock Price (Using Prophet)

We‚Äôll apply time series forecasting to project AAPL‚Äôs price for the next 30 days.

"""

from prophet import Prophet
import pandas as pd
import matplotlib.pyplot as plt
from prophet.plot import plot
import prophet.plot

# Make sure ds has no timezone
aapl_df = combined_df[combined_df['Ticker'] == 'AAPL'][['Date', 'Close']].rename(columns={'Date': 'ds', 'Close': 'y'})
aapl_df['ds'] = pd.to_datetime(aapl_df['ds']).dt.tz_localize(None)  # Remove timezone

# Fit Prophet model
model = Prophet(daily_seasonality=True)
model.fit(aapl_df)

# Forecast for next 30 days
future = model.make_future_dataframe(periods=30)
forecast = model.predict(future)

def safe_plot_forecast(model, forecast):
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(model.history['ds'].values, model.history['y'].values, 'k.', label='Historical')
    ax.plot(forecast['ds'].values, forecast['yhat'].values, 'b-', label='Forecast')
    ax.fill_between(forecast['ds'].values,
                    forecast['yhat_lower'].values,
                    forecast['yhat_upper'].values,
                    color='#0072B2', alpha=0.2)
    ax.legend()
    ax.set_title("Forecast Plot")
    ax.set_xlabel("Date")
    ax.set_ylabel("Value")
    plt.tight_layout()
    plt.grid(True)
    plt.show()
    return fig



# Plot forecast
safe_plot_forecast(model, forecast)

"""## ‚úÖ Summary & Takeaways

- Built a financial monitoring engine across 4 companies using Python
- Calculated KPIs like volatility, price change %, and volume averages
- Forecasted AAPL stock price using Prophet
- This framework can be extended to cash flow, revenue, earnings, or ESG data

"""

# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.title("üìä Financial Stock Analyzer")

ticker = st.selectbox("Choose a Ticker", combined_df['Ticker'].unique())
stock_df = combined_df[combined_df['Ticker'] == ticker]

st.line_chart(stock_df.set_index('Date')['Close'])

st.write("Moving Averages:")
stock_df['MA_20'] = stock_df['Close'].rolling(window=20).mean()
stock_df['MA_50'] = stock_df['Close'].rolling(window=50).mean()
st.line_chart(stock_df.set_index('Date')[['Close', 'MA_20', 'MA_50']])